#This program is for Muhammad Rizwan's Lab 9 Assignment for Computing I
#This program will involve the file processing of the .csv file "Electric Vehicle Population Data" for the State of Washington

print('\nFile Processing of "Electric Vehicle Population Data" for the State of Washington:\n'); # print a message indicating the start of the file processing

import csv; # import csv library
import os; # import os
from datetime import datetime; # from datetime import datetime library

def process_and_save_data(): # define the process_and_save_data function
    processed_data = []; # initialize an empty list to store processed data

    try: # try function
        with open("Electric_Vehicle_Population_Data.csv", 'r') as file: # open the original CSV file for reading
            csvreader = csv.reader(file); # create a CSV reader object
            header = next(csvreader); # read the header row and add a new column header
            header.append("Charging Speed"); # append header with new column header
            processed_data.append(header); # add the header row to processed_data list

            charging_speed = 20; # initialize charging speed
            for row in csvreader: # iterate through rows in the CSV file
                if row[-1] == "N/A": # check if the last column has value "N/A"
                    merged_col_val = "None"; # return a 'None' value if there is an N/A in the list
                else: # otherwise
                    merged_col_val = f"{row[-1]}@{charging_speed}kWh"; # combine values from the last column and charging speed
                row.append(merged_col_val); # add the merged column value to the row
                charging_speed += 2; # update charging speed for the next row
                processed_data.append(row); # add the row to processed_data list

    except FileNotFoundError: # exception handling if the file is not found
        print("Error: The file 'Electric_Vehicle_Population_Data.csv' was not found."); # handle file not found error
        return; # return the value above
    except Exception as e: # exception handling for other exceptions
        print(f"An error occurred: {e}"); # print 'An error occurred' if there is an exception
        return; # return the value above

    file_footer = ["Generated by Muhammad Rizwan on:", datetime.now().strftime('%Y-%m-%d')]; # create a footer with the generation information
    processed_data.append(file_footer); # add the footer to processed_data list

    os.makedirs("newcsv_directory", exist_ok=True); # create a new directory if it doesn't exist

    file_name = f"Electric_Vehicle_Population_Data_Report{datetime.now().strftime('%Y-%m-%d')}.csv"; # generate a meaningful file name with the current date

    file_path = os.path.join("newcsv_directory", file_name); # construct the full file path

    with open(file_path, 'w', newline='') as csvfile: # open a new CSV file for writing
        csvwriter = csv.writer(csvfile); # create a CSV writer object
        csvwriter.writerow(["Electric Vehicle Population Data Report:"]); # write the report header
        csvwriter.writerow([]); # write an empty row for spacing

        for row in processed_data: # write each row of processed data to the new CSV file
            csvwriter.writerow(row); # write the rows for the new CSV file

    print(f"Processed data has been saved to {file_path}"); # print a message indicating the successful completion and the path where the processed data is saved

if __name__ == "__main__": # check if the script is run directly and call the function
    process_and_save_data(); # call the function 'process_and_save_data
